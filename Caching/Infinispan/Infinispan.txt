Infinispan
  - high performance cache
  - NoSQL Database (key-value pair store)
  - A transactional scalable data-grid suited for cloud deployments(XA)
  - The open source project supported as "JBoss Data Grid"
  - org.infinispan.Cache<K,V>
  
  Standalone operation
  Clustered operation
    Invalidated data grid
    Replicated data grid
    Distributed data grid (default)
    L1 caching
 
Passivation:
When passivation is disabled, whenever an element is modified, added or removed, then that modification is persisted in the backend store via the cache loader. There is no direct relationship between eviction and cache loading. If you don't use eviction, what's in the persistent store is basically a copy of what's in memory. If you do use eviction, what's in the persistent store is basically a superset of what's in memory (i.e. it includes entries that have been evicted from memory). When passivation is enabled, there is a direct relationship between eviction and the cache loader. Writes to the persistent store via the cache loader only occur as part of the eviction process. Data is deleted from the persistent store when the application reads it back into memory. In this case, what's in memory and what's in the persistent store are two subsets of the total information set, with no intersection between the subsets

<dependency>
  <groupId>org.infinispan</groupId>
  <artifactId>infinispan-core</artifactId>
  <version>LATEST_INFINISPAN_VERSION</version>
</dependency>



DefaultCacheManager m = new DefaultCacheManager("path/to/my/infinispan_config.xml");
Cache<String, String> c = m.getCache();

infinispam_config.xml
<infinispan>
  <cache-container default-cache="default">
  <transport cluster="mycluster"/>
  <distributed-cache name="default" mode="SYNC"/>
  </cache-container>
</infinispan>

org.infinispan.manager.DefaultCacheManager


<distributed-cache name="mortaldata">
  <expiration lifespan="600000" /> 
  <!-- lifespan in milliseconds -->
</distributed-cache>

<?xml version="1.0" encoding="UTF-8"?>
<infinispan
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="urn:infinispan:config:5.2 http://www.infinispan.org/schemas/infinispan-config-5.2.xsd
                       urn:infinispan:config:jdbc:5.2 http://www.infinispan.org/schemas/infinispan-cachestore-jdbc-config-5.2.xsd"
   xmlns="urn:infinispan:config:5.2"
   xmlns:jdbc="urn:infinispan:config:jdbc:5.2" >
 
<loaders>
   <binaryKeyedJdbcStore xmlns="urn:infinispan:config:jdbc:5.2" fetchPersistentState="false"ignoreModifications="false" purgeOnStartup="false">
       <connectionPool connectionUrl="jdbc:h2:mem:infinispan_binary_based;DB_CLOSE_DELAY=-1" username="sa" driverClass="org.h2.Driver"/>
       <binaryKeyedTable dropOnExit="true" createOnStart="true" prefix="ISPN_BUCKET_TABLE">
         <idColumn name="ID_COLUMN" type="VARCHAR(255)" />
         <dataColumn name="DATA_COLUMN" type="BINARY" />
         <timestampColumn name="TIMESTAMP_COLUMN" type="BIGINT" />
       </binaryKeyedTable>
   </binaryKeyedJdbcStore>
</loaders>
 
 :
 
</infinispan>
ConfigurationBuilder builder = new ConfigurationBuilder();
  builder.loaders()
     .addLoader(JdbcBinaryCacheStoreConfigurationBuilder.class)
     .fetchPersistentState(false)
     .ignoreModifications(false)
     .purgeOnStartup(false)
     .table()
        .dropOnExit(true)
        .createOnStart(true)
        .tableNamePrefix("ISPN_BUCKET_TABLE")
        .idColumnName("ID_COLUMN").idColumnType("VARCHAR(255)")
        .dataColumnName("DATA_COLUMN").dataColumnType("BINARY")
        .timestampColumnName("TIMESTAMP_COLUMN").timestampColumnType("BIGINT")
     .connectionPool()
        .connectionUrl("jdbc:h2:mem:infinispan_binary_based;DB_CLOSE_DELAY=-1")
        .username("sa")
        .driverClass("org.h2.Driver");

Bellow is an sample configuration for the JdbcStringBasedCacheStore. For detailed description of all the parameters used refer to the javadoc.
<loaders>
   <stringKeyedJdbcStore xmlns="urn:infinispan:config:jdbc:5.2" fetchPersistentState="false" ignoreModifications="false" purgeOnStartup="false">
       <connectionPool connectionUrl="jdbc:h2:mem:infinispan_binary_based;DB_CLOSE_DELAY=-1" username="sa" driverClass="org.h2.Driver"/>
       <stringKeyedTable dropOnExit="true" createOnStart="true" prefix="ISPN_STRING_TABLE">
         <idColumn name="ID_COLUMN" type="VARCHAR(255)" />
         <dataColumn name="DATA_COLUMN" type="BINARY" />
         <timestampColumn name="TIMESTAMP_COLUMN" type="BIGINT" />
       </stringKeyedTable>
   </stringKeyedJdbcStore>
</loaders>

API
  Map like key/value store
  Upcoming JPA-like layer
Consistent hash based distribution
  Self healing
  No single point of failure
Highly concurrent
  MVCC locking
Presistence
   not just in memory
   write through and write behind
   Pluggable drivers
Eviction and expiry
   Efficient, adaptive algorithms
   Addresses shortcomings of LRU & FIFO
XA Transactions
    2-phase commit based
    Deadlock detection algorithms
    Coming soon: Atomic Broadcast
Map/reduce
     5.0.0.Alpha2 APIs
Querying
     Using Lucene and Hibernate Search to index


CLient/Server Architecture

	     |-Infinispan
             |     |
Application -|-Infinispan
             |     |
	     |-Infinispan

Supported Protocols
Rest, Memcached, Hot Rod

Protocol: text, text, Binary
Client Libraries: NA, Plenty, Currently in JAVA
Clustered: yes, yes. yes
Smart Routing: No, No, Yes
Load Balancing/Failover: HTTP LB, only predefined server list, Dynamci

Infinispan is data grid
  In-Memory
  P2P, distributed
  Low-latency, fast key/value store
No SQL database
  Persistence
  Map/Reduce
Querying support
Transactional

Transparent horizontal scalability
	Elastic in both directions
Fast, low latency data access
Ability to address a very large heap
Cloud-ready database
Not just for java
Open Source

DaaS(Data as a Source)

Start infinispan server:
bin/startServer.sh -r memcached(or)hotrod \ -c infinispan.xml

REST endpoint
	infinispan-server-rest.war (servlet container)
	exposes HTTP endpoint for REST

Map-like API
Async API
Consistent Hash based distribution
Write-through, write-behind
Eviction,expiration
Management tooling
REST API
Hibernate Second level caching
4.1.0
Deadlock detection
Client/Server protocals
	Memchached, Hot Rod
Lucene Dicectory implementation

JPA-like API
Fine-grained replication
Distributed code execution
	Map/reduce
Virtual nodes for more even distribution
in Active development

================================================================================================
Infinispan-server-9.4.14.Final.zip

zip two times  (-1 and -2)

bin
1) add users

2) clustered.cmd
standalone.bat -c clustered.xml

container
container clustered
cache
cache rulesServices
put a a
get a

ConfigurationBuilder builder = new ConfigurationBuilder();
builder.addServers("localhost:11222");
RemoteCacheManager cacheManager = new RemoteCacheManager(builder.build());
RemoteCache<Object, Object> cache = cacheManager.getCache("default");
system.out.println(cache.get("Name")l
cacheManager.close();

Ickle:
    is a light and small subset of JP-QL, hence the lovely name
    queries Java classes and supports Protocol Buffers too
    queries can target a single entity type
    queries can filter on properties of embedded objects too, including collections
    supports projections, aggregations, sorting, named parameters
    supports indexed and non-indexed execution
    supports complex boolean expressions
    does not support computations in expressions (eg. user.age > sqrt(user.shoeSize + 3) is not allowed but user.age >= 18 is fine)
    does not support joins
        but, navigations along embedded entities are implicit joins and are allowed
        joining on embedded collections is allowed
        other join types not supported
    subqueries are not supported
    besides the normal relational operators it offers full-text operators, similar to Luceneâ€™s  query parser
    is now supported across various Infinispan APIs, wherever a Query produced by the QueryBuilder is accepted (even for continuous queries or in event filters for listeners!)

git clone https://github.com/infinispan/infinispan-embedded-tutorial.git

References
https://github.com/infinispan/infinispan-embedded-tutorial
https://dzone.com/refcardz/getting-started-infinispan
https://dzone.com/articles/infinispan-data-grid-platform
https://docs.jboss.org/author/display/ISPN/Cache+Loaders+and+Stores
http://infinispan.org/docs/stable/getting_started/getting_started.html
